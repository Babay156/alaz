To clean debug print pipe -> cat /sys/kernel/debug/tracing/trace_pipe

When debugging, bpf_trace_printk's "fmt_size" is important. Otherwise, you can get errors like below from verifier:
    load program: permission denied: invalid access to map value, value_size=31 off=14 size=20: R1 min value is outside of the allowed memory range (228 line(s) omitted)


To see bpf calls with strace: 
    sudo strace -o calls.txt  -f -e trace=bpf,ioctl go run -exec sudo main.go bpf_bpfel.go

See "/sys/kernel/debug/tracing/events" to find available tracepoints

To generate kernel headers files necessary:
    > bpftool btf dump file /sys/kernel/btf/vmlinux format c > vmlinux.h

See a tracepoints format:
    > cat /sys/kernel/debug/tracing/events/task/task_newtask/format

> Printing examples:
    // const char *msg = "Pid -> **%d**"; // 12 + specifier (2)
    // bpf_trace_printk(msg, 14, pid);

    // const char *msg2 = "Source Port: %d\n";
    // bpf_trace_printk(msg2, 17, args.sport);

    // const char *msg3 = "SAddr: %d\n";
    // bpf_trace_printk(msg3, 11, e.saddr[0]);
    // bpf_trace_printk(msg3, 11, e.saddr[1]);
    // bpf_trace_printk(msg3, 11, e.saddr[2]);
    // bpf_trace_printk(msg3, 11, e.saddr[3]);
    // bpf_trace_printk(msg3, 11, e.saddr[4]);

// To debug program in vscode:
    - First build the program with "go build -o myapp main.go bpf_bpfel.go"
    -  "mode": "exec",
        "program": "${workspaceFolder}/prog/tcp_state/myapp",
        "console": "integratedTerminal",
        "asRoot": true,

// To get first 50 lines of logs from a pod: 
> kubectl logs -n ddosify alaz-daemonset-jvkcn | head -n 50